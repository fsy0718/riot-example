// common
$CVS: "0801";
$IMGURL: "../img";
$base-size: 16px;
$white: #fff;
$min-width: 320px;
$max-width: 480px;
$main-color: #7f1f59;
$purple-1: #651c4d;
$purple-2: #852960;

$darkblack: #333333;
$lightblack: #bfbfbf;
$midblack: #666666;
$trans-gray: #cccccc;
$gray-1: #808080;
$gray-2: #aaaaaa;
$border-color: #eeeae9;
$gray-bg-color: #f7f6f5;

$orange-money: #ff9700;

//日历颜色
$calendar-day-color: #393836;
$calendar-day-disable-color: #c5c5c5;
$calendar-day-high-color: #eee2e9;
$calendar-line-color: #efebea;

// mixin function

@function r-size($size) {
  @return 0rem + $size / 16;
}

@function rSize($size) {
  @return 0rem + $size / 2 / 16;
}

@function newSize($size) {
  @return 0rem + $size / 2 / 100;
}

@function padVal($val1, $val2) {
  @return (0rem + $val1 / 1259) (0rem + $val2 / 4000);
}

@function reVal($val) {
  @return 0rem + $val / 2 / 100 / 0.85;
}

@function topVal($val) {
  @return 0rem + $val / 2 / 100 / 2.5;
}

@function relative-size($rota) {
  @return $base-size * $rota;
}

@function bgPosition($index, $len) {
  @return 0 ($index / ($len - 1) * 100%);
}

@function img-url($img, $path: "") {
  @if $path != "" {
    @return url(#{$path}/#{$img}?t=#{$CVS});
  }
  @else {
    @return url(#{$IMGURL}/#{$img}?t=#{$CVS});
  }
}

@mixin prefix($name, $params...) {
  -webkit-#{$name}: $params;
  -moz-#{$name}: $params;
  -ms-#{$name}: $params;

  // -o-#{$name}: $params
  #{$name}: $params;
}

@mixin prefix-value($name, $params...) {
  #{$name}: -webkit-#{$params};
  #{$name}: -moz-#{$params};
  #{$name}: -ms-#{$params};
  #{$name}: #{$params};
}

@mixin keyframes($name) {
  @-webkit-keyframes #{$name} {
    @content;
  }

  @-moz-keyframes #{$name} {
    @content;
  }

  @keyframes #{$name} {
    @content;
  }
}

@mixin animation($params...) {
  @include prefix(animation, $params);
}

@mixin box-sizing($params: border-box) {
  @include prefix(box-sizing, $params);
}

@mixin align-items($params: center) {
  @include prefix(align-items, $params);

  @include prefix-value(display, flex);
}

@mixin box-shadow($params...) {
  @include prefix(box-shadow, $params);
}

@mixin text-shadow($params...) {
  @include prefix(text-shadow, $params);
}

@mixin border-radius($value) {
  border-radius: $value;
}

@mixin transform($params...) {
  @include prefix(transform, $params);
}

@mixin transition($params...) {
  @include prefix(transition, $params);
}

@mixin screen-adapter($type) {
  @if $type == slim {
    @media screen and (min-width: 320px) {
      @content;
    }
  }
  @else if $type == standard {
    @media screen and (min-width: 360px) {
      @content;
    }
  }
  @else if $type == ip6 {
    @media screen and (min-width: 375px) {
      @content;
    }
  }
  @else if $type == "ip6+" {
    @media screen and (min-width: 414px) {
      @content;
    }
  }
}

@mixin gra($start, $end, $origin: v) {
  @if $origin == v {
    _zoom: 1;
    background-color: #{$start};
    background-image: -webkit-gradient(linear, left top, left bottom, from(#{$start}), to(#{$end}));
    background-image: -webkit-linear-gradient(top, #{$start}, #{$end});
    background-image: -moz-linear-gradient(top, #{$start}, #{$end});
    background-image: -ms-linear-gradient(top, #{$start}, #{$end});
    background-image: -o-linear-gradient(top, #{$start}, #{$end});
    background-image: linear-gradient(top, #{$start}, #{$end});
    _background: #{$end};
    filter: progid:DXImageTransform.Microsoft.gradient(startColorStr='#{$start}', EndColorStr='#{$end}');
  }
  @else {
    _zoom: 1;
    background-color: #{$start};
    background-image: -webkit-gradient(linear, left top, right top, from(#{$start}), to(#{$end}));
    background-image: -webkit-linear-gradient(left, #{$start}, #{$end});
    background-image: -moz-linear-gradient(left, #{$start}, #{$end});
    background-image: -ms-linear-gradient(left, #{$start}, #{$end});
    background-image: -o-linear-gradient(left, #{$start}, #{$end});
    background-image: linear-gradient(left, #{$start}, #{$end});
    _background: #{$end};
    filter: progid:DXImageTransform.Microsoft.gradient(GradientType=1, startColorStr='#{$start}', EndColorStr='#{$end}');
  }
}

@mixin textover($num: 1) {
  overflow: hidden;
  text-overflow: ellipsis;

  @if $num > 1 {
    @include prefix(line-clamp, $num);

    @include prefix(box-orient, vertical);

    @include prefix_value(display, box);
  }
  @else {
    white-space: nowrap;
  }
}

//紫色阴影
@mixin shadowpurple($x: 0px, $y: 5px, $z: 15px, $w: 5px, $color: #eed5e4) {
  box-shadow: $x $y $z $w $color;
}

//
